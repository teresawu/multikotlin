plugins {
    id 'kotlin-multiplatform'
    id 'kotlinx-serialization'
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'

repositories {
    google()
    jcenter()
    mavenCentral()
    // For Klock (https://github.com/korlibs/klock)
    repositories {
        maven { url "https://dl.bintray.com/soywiz/soywiz" }
    }
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId 'de.moviesmpp'
        minSdkVersion 23
        targetSdkVersion 28
        versionCode 1
        versionName '1.0'
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    packagingOptions {
        // Ktor prevents the build otherwise
        exclude 'META-INF/*.kotlin_module'
    }

    compileOptions {
        targetCompatibility = "8"
        sourceCompatibility = "8"
    }

    sourceSets {
        main {
            // per default MPP names the Android module "main" - not sure how to change this, so we need to tell
            // Gradle where to find the Android code
            manifest.srcFile 'src/androidMain/AndroidManifest.xml'
            java.srcDirs = ['src/androidMain/java']
            res.srcDirs = ['src/androidMain/res']
        }
    }
}

kotlin {
    android("android")
    // This is for iPhone emulator
    // Switch here to iosArm64 (or iosArm32) to build library for iPhone device
    iosX64("ios") {
        binaries {
            framework {
                freeCompilerArgs.add("-Xobjc-generics")
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:${versions.serialization}"

                // HTTP
                implementation "io.ktor:ktor-client-core:${versions.ktor}"
                implementation "io.ktor:ktor-client-json:${versions.ktor}"
                implementation "io.ktor:ktor-client-serialization:${versions.ktor}"

                // Coroutines
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:${versions.coroutines}"

                // Date & Time
                implementation "com.soywiz:klock-metadata:${versions.klock}"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
                implementation "io.mockk:mockk:1.9.3"
            }
        }
        androidMain {
            dependencies {
                implementation kotlin('stdlib')
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:${versions.serialization}"

                // HTTP
                implementation "io.ktor:ktor-client-android:${versions.ktor}"
                implementation "io.ktor:ktor-client-json-jvm:${versions.ktor}"
                implementation "io.ktor:ktor-client-serialization-jvm:${versions.ktor}"
                implementation "io.ktor:ktor-client-okhttp:${versions.ktor}"
                implementation "com.squareup.okhttp3:logging-interceptor:3.14.1"

                // Coroutines
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutines}"

                // Date & Time
                implementation "com.soywiz:klock-android:${versions.klock}"
            }
        }
        androidTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation 'com.android.support.test:runner:1.0.2'

                // actually not needed, see https://youtrack.jetbrains.com/issue/KT-31189
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:${versions.serialization}"
                implementation "com.soywiz:klock-android:${versions.klock}"

                implementation "io.mockk:mockk:1.9.3"
            }
        }

        iosMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:${versions.serialization}"

                // HTTP
                implementation "io.ktor:ktor-client-ios:${versions.ktor}"
                implementation "io.ktor:ktor-client-json-native:${versions.ktor}"
                implementation "io.ktor:ktor-client-serialization-iosx64:${versions.ktor}"

                // Coroutines
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:${versions.coroutines}"

                // Date & Time
                implementation "com.soywiz:klock-iosx64:${versions.klock}"
            }
        }
        iosTest {
        }
    }
}


// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
task copyFramework {
    def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"
    dependsOn "link${buildType.toLowerCase().capitalize()}FrameworkIos"

    doLast {
        def srcFile = kotlin.targets.ios.binaries.getFramework(buildType).outputFile
        def targetDir = getProperty("configuration.build.dir")
        copy {
            from srcFile.parent
            into targetDir
            include 'greeting.framework/**'
            include 'greeting.framework.dSYM'
        }
    }
}