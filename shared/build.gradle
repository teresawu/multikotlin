apply plugin: 'com.android.library'
apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'

android {
    compileSdkVersion 29
    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 29
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

kotlin {
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith('iphoneos') ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'ios'){
            binaries {
                framework('shared')
            }
        }

        fromPreset(presets.android, 'android')
    }
    sourceSets {
        //Expected is inside the commonMain -> expect val ApplicationDispatcher: CoroutineDispatcher
        commonMain.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib-common:1.3.10"

            // HTTP
            implementation "io.ktor:ktor-client-core:1.0.0"
            implementation "io.ktor:ktor-client-json:1.0.0"
            implementation "io.ktor:ktor-client:1.0.0"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:0.11.0"

            // Coroutines
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.0.1"

        }
        //Actual is inside the androidMain (iOSMain, jsMain) -> actual val ApplicationDispatcher: CoroutineDispatcher = Dispatchers.IO
        androidMain.dependencies {
            implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.3.10'

            // HTTP
            implementation "io.ktor:ktor-client-android:1.0.0"
            implementation "io.ktor:ktor-client-json-jvm:1.0.0"
            implementation "io.ktor:ktor-client-okhttp:1.0.0"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.11.0"

            // Coroutines
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.0.1"

        }
        iosMain.dependencies {
            // HTTP
            implementation "io.ktor:ktor-client-ios:1.0.0"
            implementation "io.ktor:ktor-client-json-native:1.0.0"
            implementation "io.ktor:ktor-client-serialization-iosx64:1.2.0-rc"

            // Coroutines
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:1.2.1"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:1.2.1"
        }
    }
}

configurations {
    compileClasspath
}

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.ios.binaries.getFramework("shared", mode)
    inputs.property "mode", mode
    dependsOn framework.linkTask
    from { framework.outputFile.parentFile }
    into frameworkDir
    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}
tasks.build.dependsOn packForXCode